@page "/list-store"
@layout HomeMasterPage
@inject IJSRuntime js;
@inject StoreService storeService;

<div class="container mt-4">
    <button class="btn btn-success mb-3">Create Store</button>
    <h3 class="mb-3">Store List</h3>
    <div class="table-responsive">
        <table class="table table-striped table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Id</th>
                    <th class="w-25">Name</th>
                    <th>Alias</th>
                    <th class="w-50">Description</th>
                    <th>Image</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (StoreVM item in storeService.lstStore)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td class="text-truncate" style="max-width: 150px;">@item.Name</td>
                        <td>@item.Alias</td>
                        <td class="text-truncate" style="max-width: 300px;">@item.Description</td>
                        <td>
                            <img src="@item.Image" alt="Store Image" style="max-width: 80px; max-height: 80px;"
                                class="img-fluid rounded" />
                        </td>
                        <td>
                            <div class="d-flex">
                                <a href="/store/@item.Id" class="btn btn-primary btn-sm me-2">Edit</a>
                                <button @onclick="(e) => DeleteStore(item.Id.ToString())"
                                    class="btn btn-danger btn-sm">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    public string res = "";
    private async Task DeleteStore(string id)
    {
        var confirm = await js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this store?");
        if (confirm)
        {
            res = await storeService.DeleteStoreByIdApi(id);
            storeService.GetAllStoreApi();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        storeService.OnChange += StateHasChanged;
        storeService.GetAllStoreApi();
    }

    public void Dispose()
    {
        storeService.OnChange -= StateHasChanged;
    }
}
