@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json

@inject ProductService prodService;

@inject NavigationManager Navigation
<div class="container">
    <EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-Value="product.name" />
            <ValidationMessage For="@(() => product.name)" />
        </div>

        <div class="mb-3">
            <label for="price" class="form-label">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.price" />
            <ValidationMessage For="@(() => product.price)" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="product.description" />
            <ValidationMessage For="@(() => product.description)" />
        </div>

        <div class="mb-3">
            <label for="shortDescription" class="form-label">Short Description</label>
            <InputText id="shortDescription" class="form-control" @bind-Value="product.shortDescription" />
            <ValidationMessage For="@(() => product.shortDescription)" />
        </div>

        <div class="mb-3">
            <label for="quantity" class="form-label">Quantity</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="product.quantity" />
            <ValidationMessage For="@(() => product.quantity)" />
        </div>

        <div class="mb-3">
            <label for="imgLink" class="form-label">Image Link</label>
            <InputText id="imgLink" class="form-control" @bind-Value="product.imgLink" />
            <ValidationMessage For="@(() => product.imgLink)" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
    <div class="alert alert-danger">@res</div>
</div>

@code {
    private ProductAddNew product = new ProductAddNew();
    private string res { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        prodService.OnChange += StateHasChanged;
    }
    private async Task HandleValidSubmit()
    {
        res = await prodService.AddNewProduct(product);
        StateHasChanged();

    }
    public void Dispose()
    {
        prodService.OnChange -= StateHasChanged;

    }
    private void Cancel()
    {
        // Handle cancel action
        Navigation.NavigateTo("/");
    }
}