@inject ProductService prodService
@inject NavigationManager Nav

<EditForm Model="@product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="product.name" />
        <ValidationMessage For="@(() => product.name)" />
    </div>

    <div class="mb-3">
        <label for="price" class="form-label">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="product.price" />
        <ValidationMessage For="@(() => product.price)" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="product.description" />
        <ValidationMessage For="@(() => product.description)" />
    </div>

    <div class="mb-3">
        <label for="shortDescription" class="form-label">Short Description</label>
        <InputText id="shortDescription" class="form-control" @bind-Value="product.shortDescription" />
        <ValidationMessage For="@(() => product.shortDescription)" />
    </div>

    <div class="mb-3">
        <label for="quantity" class="form-label">Quantity</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="product.quantity" />
        <ValidationMessage For="@(() => product.quantity)" />
    </div>

    <div class="mb-3">
        <label for="imgLink" class="form-label">Image Link</label>
        <InputText id="imgLink" class="form-control" @bind-Value="product.imgLink" />
        <ValidationMessage For="@(() => product.imgLink)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>

    @if (!string.IsNullOrEmpty(res))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-3">@res</div>
    }
</EditForm>

@code {
    private ProductAddNew product = new();
    private List<ProductVM> lstProd = new();
    private string res = "";
    private bool isSuccess = false;
    private HubConnection RoomHub;

    protected override async Task OnInitializedAsync()
    {
        RoomHub = new HubConnectionBuilder()
        .WithUrl(Nav.ToAbsoluteUri("/room-hub"))
        .Build();
        await RoomHub.StartAsync();
        RoomHub.On<List<ProductVM>>("GetAllProduct", async (updatedProducts) =>
        {
            lstProd = updatedProducts;
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Nhận phản hồi từ server thay vì tự đặt thông báo
            res = await RoomHub.InvokeAsync<string>("AddNewProd", product);
            isSuccess = !string.IsNullOrEmpty(res) && res.Contains("success");
        }
        catch (Exception ex)
        {
            res = $"Error: {ex.Message}";
            isSuccess = false;
        }

        StateHasChanged();
    }


    private void Cancel()
    {
        Nav.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        if (RoomHub is not null)
        {
            await RoomHub.DisposeAsync();
        }
    }
}